#!/bin/bash
# export these env vars or set them here if you wish to run command with no params
# CHECK_URL=""
# TELEGRAM_TOKEN=""
# TELEGRAM_CHAT=""
# export this var to override known good URL
# KNOWN_GOOD_URL=""

# Configuration
TELEGRAM_SH_DIR=~/.telegram-sh # Telegram.sh installation dir
DEBUG_MSG=false                # echo alerts to STDOUT
ERR_REPEAT_SECS=14400          # repeat error alert every XXXX secs (14400 = 4 hrs default)
REPORT_OK_AT_START=false       # if true, OK will be sent at first start, or after every reboot
TIMEOUT_SECS=10                # curl max time (timeout before fail)
KNOWN_GOOD_URL_DEFAULT=https://www.google.com

if [ ! -f "$TELEGRAM_SH_DIR/telegram" ]; then
  echo "telegram.sh missing. Running installation"
  git clone https://github.com/fabianonline/telegram.sh.git $TELEGRAM_SH_DIR
fi

if [ "$1" != "" ]; then
  CHECK_URL=$1
fi
if [ "$2" != "" ] && [ "$3" != "" ]; then
  TELEGRAM_TOKEN=$2
  TELEGRAM_CHAT=$3
fi

if [ "$CHECK_URL" = "" ] || [ "$TELEGRAM_TOKEN" = "" ] || [ "$TELEGRAM_CHAT" = "" ]; then
  echo checkalive version 1.0
  echo 
  echo Usage: checkalive [CHECK_URL] [TELEGRAM_TOKEN] [TELEGRAM_CHAT]
  echo ex.: checkalive http://www.google.com 0123456789:AAAAAAAAA-BBBBBB-CCCCCCCCCCCCCCCCCC 123456789
  echo Please refer to $TELEGRAM_SH_DIR/README.md for details regarding TELEGRAM vars
  exit 0
fi

if [ "$KNOWN_GOOD_URL" = "" ]; then
  KNOWN_GOOD_URL=KNOWN_GOOD_URL_DEFAULT
fi

SANITIZED_URL=`echo $CHECK_URL |sed -e "s/\\///g"`
OK_TSTP_FILE="/tmp/checkalive_ok_$SANITIZED_URL"
ERR_TSTP_FILE="/tmp/checkalive_err_$SANITIZED_URL"
MESSAGE=""

CHECK_URL_NOCACHE=$CHECK_URL
if [[ $CHECK_URL_NOCACHE == *\?* ]]; then
  CHECK_URL_NOCACHE+="&"
else
  CHECK_URL_NOCACHE+="?"
fi
CHECK_URL_NOCACHE+="x=$RANDOM"

# Test local connectivity curl-ing the known-good URL. If not available, skip any further monitoring check
HTTP_STATUS=`curl --no-keepalive -m $TIMEOUT_SECS -s -o /dev/null -w "%{http_code}" -H "Cache-Control: no-cache, no-store, must-revalidate" -H "Pragma: no-cache" -H "Expires: 0" $KNOWN_GOOD_URL`
if [ "$HTTP_STATUS" = "200" ]; then
  HTTP_STATUS=`curl --no-keepalive -m $TIMEOUT_SECS -s -o /dev/null -w "%{http_code}" -H "Cache-Control: no-cache, no-store, must-revalidate" -H "Pragma: no-cache" -H "Expires: 0" $CHECK_URL_NOCACHE`
  ERROR_CODE=$?

  if [ "$HTTP_STATUS" = "200" ]; then
    # Send OK message in case of a previous error, or if REPORT_OK_AT_START = true
    if [ -f "$ERR_TSTP_FILE" ] || [ "$REPORT_OK_AT_START" = true ]; then
      rm $ERR_TSTP_FILE 2>/dev/null
      if [ ! -f "$OK_TSTP_FILE" ]; then
        date +%s > $OK_TSTP_FILE
        MESSAGE="$CHECK_URL: monitoring OK (from $HOSTNAME)"
      fi
    fi
  else
    rm $OK_TSTP_FILE 2>/dev/null
    if [ ! -f "$ERR_TSTP_FILE" ]; then
      date +%s > $ERR_TSTP_FILE
      MESSAGE="$CHECK_URL: monitoring DOWN! (from $HOSTNAME) - Errcode ($ERROR_CODE)"
    else
      if [ $(( `date +%s`-`cat $ERR_TSTP_FILE` )) -gt $ERR_REPEAT_SECS ]; then
        # Error timeout expired: repeat error message
        date +%s > $ERR_TSTP_FILE
        MESSAGE="$CHECK_URL: repeated monitoring DOWN! (from $HOSTNAME) - Errcode ($ERROR_CODE)"
      fi
    fi
  fi

  if [ "$MESSAGE" != "" ]; then
    if [ "$DEBUG_MSG" = true ]; then
      echo $MESSAGE
    fi
    $TELEGRAM_SH_DIR/telegram -t $TELEGRAM_TOKEN -c $TELEGRAM_CHAT "$MESSAGE" 
  fi
fi